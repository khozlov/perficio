var perficioApp = angular.module('perficioApp', ['ui.router']);

perficioApp.config(function($stateProvider, $urlRouterProvider, $httpProvider) {
  //
  // For any unmatched url, redirect to /users
  $urlRouterProvider.otherwise("/users");
  //
  // Now set up the states
  $stateProvider
    .state('users', {
      url: "/users",
      templateUrl: "{{mountPoint}}/ng-templates/users.html"
    })
    .state('user', {
      url: "/user/:id",
      templateUrl: "{{mountPoint}}/ng-templates/user.html"
    })
    .state('achievement', {
      url: "/achievement/:id",
      templateUrl: "{{mountPoint}}/ng-templates/achievement.html"
    })
    .state('achievements', {
      url: "/achievements",
      templateUrl: "{{mountPoint}}/ng-templates/achievements.html"
    })
    .state('share', {
      url: "/share/:aid/:uid",
      templateUrl: "{{mountPoint}}/ng-templates/share.html"
    });


  $httpProvider.interceptors.push(function($q, $window) {
    return {
      'responseError': function(response) {
        if (response.status === 401) {
          if (response.data.redirect) {
            $window.location.pathname = response.data.redirect;
            return $q.reject(response);
          }
        }
        return response;
      }
    };
  });
});

perficioApp.run(function($rootScope, $http) {
  $rootScope.mountPoint = '{{mountPoint}}';
  $http.get('{{mountPoint}}/users/current').success(function(data) {
    $rootScope.currentUser = data;
  });
});

perficioApp.directive('honeycomb', ['$timeout', function ($timeout) {
  return {
    link: function (scope, elem, attrs) {
      scope.$on('honeycomb', function (event, container, element, margin) {
        $timeout(function () { // You might need this timeout to be sure its run after DOM render.
          honeycomb(container, element, margin);
        }, 0, false);
      })
    }
  };
}]);

perficioApp.directive('tooltip', function ($document) {
  return {
    link: function (scope,element,attrs) {
      $(element).hover(function(){
        // Hover over code
        var title = $(this).attr('title');
        $(this).data('tipText', title).removeAttr('title');
        $('<p class="toolTip"></p>')
        .text(title)
        .appendTo('body')
        .fadeIn(300);
      }, function() {
        // Hover out code
        $(this).attr('title', $(this).data('tipText'));
        $('.toolTip').remove();
      }).mousemove(function(e) {
        var mousex = e.pageX + 10; //Get X coordinates
        var mousey = e.pageY + 10; //Get Y coordinates
        $('.toolTip')
        .css({ top: mousey, left: mousex })
      }).click(function(e){
        $(this).attr('title', $(this).data('tipText'));
        $('.toolTip').remove();
      });
    }
  }
})

perficioApp.controller('PopupController', function ($scope, $rootScope) {
    var unlockCount,
      usersCount,
      markUnlocks = function(unlockCount, usersCount) {
        drawCircle(0,'0');
        drawCircle(360 / (usersCount / unlockCount), '2s');
      };
    $scope.$on('show-popup', function(event, achievement, newUnlockCount, newUsersCount) {
      unlockCount = newUnlockCount;
      usersCount = newUsersCount;
      $('#popup-container').fadeIn(300);
      achievement.percent = (unlockCount / usersCount).toFixed(2) * 100;
      achievement.unlockCount = unlockCount;
      achievement.usersCount = usersCount;
      achievement.uid = (achievement.grantedBy) ? achievement.template : achievement._id;
      $scope.achievement = achievement;
      markUnlocks(unlockCount,usersCount);
    });
    $scope.$on('achievementGranted', function(event, achievement) {
      achievement.unlockCount = unlockCount+1;
      achievement.usersCount = usersCount;
      achievement.percent = ((unlockCount+1) / usersCount).toFixed(2) * 100;
      $scope.achievement = achievement;
      markUnlocks(unlockCount+1,usersCount);
    });
});


perficioApp.controller('UserListController', function($scope, $http) {
  $scope.users = [];
  $http.get('{{mountPoint}}/users').success(function(data) {
    var users = data;
    for (var i = 0; i < users.length; i++) {
      users[i]['achievementsCount'] = users[i].achieved.length;
      users[i].achievements = users[i].achieved.slice(0, Math.min(5, users[i]['achievementsCount']));
    }
    $scope.users = users.sort(function(a, b){ return a.achieved.length > b.achieved.length ? -1 : 1; });
    $scope.$broadcast('honeycomb','.users-list','.profile.users', '100px');
  });
});


perficioApp.controller('AchievementsListController', function($scope, $http) {
  $scope.achievements = [];
  $http.get('{{mountPoint}}/templates').success(function(data) {
    $scope.achievements = data.sort(function(a, b){ return a.name < b.name ? -1 : 1; });
    $scope.$broadcast('honeycomb','.users-list','.profile.users', '100px');
  });
});

perficioApp.controller('AchievementController', function($scope, $http, $stateParams, $rootScope) {
    var achievement; //template data
    var unlockCount; //counts users with this achievement
    var usersCount; //counts users
    var templateId = $stateParams.id;

    function async_show(){
      if(typeof unlockCount !== 'undefined' && typeof usersCount !== 'undefined' && typeof achievement !== 'undefined') {
        achievement.usersCount = usersCount;
        achievement.unlockCount = unlockCount;
        achievement.percent = (unlockCount / usersCount).toFixed(2) * 100;
        $scope.achievement = achievement;
        drawCircle(360 / (usersCount / unlockCount), '2s');
        $rootScope.ogModel.ogTitle = achievement.name;
        $rootScope.ogModel.ogDesc = achievement.description;
        $rootScope.ogModel.ogUrl = '{{mountPoint}}/achievement/' + templateId;
        $rootScope.ogModel.ogImage = achievement.imageUrl;
      }
    }

    $http.get('{{mountPoint}}/templates/' + templateId + '/achievements/count').success(
      function(data) {
        unlockCount = data.count;
        async_show();
      }
    );

    $http.get('{{mountPoint}}/users/count').success(
      function(data) {
        usersCount = data.count;
        async_show();
      }
    );

    $http.get('{{mountPoint}}/templates/' + templateId ).success(function(data) {
      achievement = data;
      async_show();
    });
});

perficioApp.controller('ShareController', function($scope, $http, $stateParams, $rootScope) {
    var achievement; //template data
    var unlockCount; //counts users with this achievement
    var usersCount; //counts users
    var user; //user data
    var templateId = $stateParams.aid;
    var userId = $stateParams.uid;

    function async_show(){
      if(typeof unlockCount !== 'undefined' && typeof user !== 'undefined' && typeof usersCount !== 'undefined' && typeof achievement !== 'undefined') {
        achievement.usersCount = usersCount;
        achievement.unlockCount = unlockCount;
        achievement.uid = (achievement.grantedBy) ? achievement.template : achievement._id;
        achievement.percent = (unlockCount / usersCount).toFixed(2) * 100;
        $scope.achievement = achievement;
        $scope.user = user;
        drawCircle(360 / (usersCount / unlockCount), '2s');
        $rootScope.ogModel.ogTitle = achievement.name;
        $rootScope.ogModel.ogDesc = achievement.description;
        $rootScope.ogModel.ogUrl = '{{mountPoint}}/achievement/' + templateId;
        $rootScope.ogModel.ogImage = achievement.imageUrl;
      }
    }

    $http.get('{{mountPoint}}/templates/' + templateId + '/achievements/count').success(function(data) {
      unlockCount = data.count;
      async_show();
    });

    $http.get('{{mountPoint}}/users/count').success(function(data) {
      usersCount = data.count;
      async_show();
    });

    $http.get('{{mountPoint}}/users/' + userId).success(function(data) {
      user = data;
      data.achieved.forEach(function(e){
        if(e.template == templateId) {
          achievement = e;
        }
      });
      async_show();
    });

});

perficioApp.controller('UserController', function($scope, $http, $stateParams, $window) {
  $http.get('{{mountPoint}}/users/' + $stateParams.id).success(function(data) {
    $scope.user = data;
    $scope.achievements = data.achieved.concat(data.unachieved).sort(function(a, b){ return a.name < b.name ? -1 : 1; });
    $scope.$broadcast('honeycomb','.achievements-list','.achievement-small', '31px');
  });

  $scope.socialLink = function(achievement, user) {
    return encodeURIComponent($window.location.origin + '{{mountPoint}}/achievements/' + achievement._id + '/social?redirectUrl=' + encodeURIComponent($window.location.origin + '{{mountPoint}}/#/share/' + achievement.template + '/' + user._id));
  }

  $scope.showAchievementPopup = function(achievementData){
    var achievement = achievementData; //template data
    var unlockCount; //counts users with this achievement
    var usersCount; //counts users
    var templateId = (typeof achievement.grantedBy === 'undefined') ? achievement._id : achievement.template; //template id

    function async_show(){
      if(typeof unlockCount !== 'undefined' && typeof usersCount !== 'undefined' && typeof achievement !== 'undefined') {
        $scope.$broadcast('show-popup', achievement, unlockCount, usersCount);
        $scope.$emit('updateSocial', achievement);
      }
    }

    $http.get('{{mountPoint}}/templates/' + templateId + '/achievements/count').success(
      function(data) {
        unlockCount = data.count;
        async_show();
      }
    );

    $http.get('{{mountPoint}}/users/count').success(
      function(data) {
        usersCount = data.count;
        async_show();
      }
    );
  }


  $scope.grantAchievement = function(templateId) {
    $http.post('{{mountPoint}}/users/' + $stateParams.id + '/grant/' + templateId).success(
      function(data) {
        angular.forEach($scope.achievements, function(template, index){
          if (template._id == templateId) {
            $scope.achievements.splice(index, 1, data);
            $scope.$broadcast('achievementGranted', data);
            $scope.$broadcast('honeycomb','.achievements-list','.achievement-small', '31px');
          }
        });
      }
    );
  }
});

$(window).resize(function(){
  honeycomb('.achievements-list','.achievement-small', '31px');
  honeycomb('.users-list','.profile.users', '100px');
  adjust_nav_functionality();
});

$(document).ready(function(){
  $('#feedback-trigger').on('click', function(e){
    $('#feedback').fadeToggle(300);
    e.preventDefault()
  });
  $('#feedback .close').on('click', function(e){
    $('#feedback').fadeToggle(300);
    e.preventDefault()
  });

  $("#toggle-nav").click(function() {
    $("nav").fadeToggle( 300 );
    return false;
  });
  adjust_nav_functionality();
});

$(window).load(function(){


})

/**
 *  Adjusts functionality of header navigation
 */
function adjust_nav_functionality() {
  var innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  window_width = Math.max( $( window ).width(), innerWidth );
  if( window_width > 780 ){
    $('nav').show();
    $('#toggle-nav').hide();
  }else if( window_width <= 780 ){
    $('nav').hide();
    $('#toggle-nav').show();
  }
}

var drawCircle = function(){
  var transform_styles = ['-webkit-transform', '-ms-transform', 'transform'];
  var transition_styles = ['-webkit-transition', '-ms-transition', 'transition'];
  return function(deg, time) {
    time = typeof time !== 'undefined' ? time : '0s';
    var rotation = Math.floor(deg/2);
    var fill_rotation = rotation;
    var fix_rotation = rotation * 2;
    for(i in transform_styles) {
      $('.circle .fill, .circle .mask.full').css(transform_styles[i], 'rotate(' + fill_rotation + 'deg)').css(transition_styles[i], transform_styles[i] + ' ' + time);
      $('.circle .fill.fix').css(transform_styles[i], 'rotate(' + fix_rotation + 'deg)').css(transition_styles[i], transform_styles[i] + ' ' + time);
    }
  }
}();

var honeycomb = function(container, element, margin){
  var jqContainer = $(container);
  jqContainer.removeAttr('style').find('.clear').remove();
  var containerWidth = jqContainer.width();
  var elementWidth = $(element).outerWidth(true);
  var row = Math.floor(containerWidth / elementWidth);
  jqContainer.width(row * elementWidth );
  var containerMargin = (containerWidth - elementWidth*row) / 2;
  jqContainer.css('margin-left', containerMargin);

  var achievements = $(element);
  achievements.removeAttr('style');

  if(row > 1) {
    for(var i = row; i < achievements.length; i = (i + 2 * row) - 1) {
      $(achievements[i]).css('margin-left', margin);
    }
  }


  $('<div class="clear"></div>').insertAfter(element+':last');

}
