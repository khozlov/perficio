var perficioApp = angular.module('perficioApp', ['ui.router']);

perficioApp.config(function($stateProvider, $urlRouterProvider, $httpProvider) {
  //
  // For any unmatched url, redirect to /state1
  $urlRouterProvider.otherwise("/users");
  //
  // Now set up the states
  $stateProvider
    .state('users', {
      url: "/users",
      templateUrl: "{{mountPoint}}/ng-templates/users.html"
    })
    .state('user', {
      url: "/user/:id",
      templateUrl: "{{mountPoint}}/ng-templates/user.html"
    });


  $httpProvider.interceptors.push(function($q, $window) {
    return {
      'responseError': function(response) {
        if (response.status === 401) {
          if (response.data.redirect) {
            $window.location.pathname = response.data.redirect;
            return $q.reject(response);
          }
        }
        return response;
      }
    };
  });
});


perficioApp.controller('UserListController', function($scope, $http) {
  $scope.users = [];
  $http.get('{{mountPoint}}/users').success(function(data) {
    var users = data;
    for (var i = 0; i < users.length; i++) {
      users[i]['achievementsCount'] = users[i].achievements.length;
      //users[i].achievements = users[i].achievements.slice(0, Math.min(5, users[i]['achievementsCount']));
    }
    $scope.users = users;
  });
});

perficioApp.controller('UserController', function($scope, $http, $stateParams) {

  $http.get('{{mountPoint}}/users/' + $stateParams.id).success(function(data) {
    $scope.user = data;
  });

  $scope.grantAchievement = function(templateId) {
    angular.forEach($scope.user.unachieved, function(template, index) {
      if (template._id == templateId) {
        $scope.user.unachieved.splice(index, 1);
      }
    });
    $http.post('{{mountPoint}}/users/' + $stateParams.id + '/grant/' + templateId).success(
      function(data) {
        $scope.user.achievements.unshift(data);
      }
    )
  }
});

$(window).resize(function(){
  honeycomb()
});


$(window).load(function(){
  honeycomb();
  draw_circle(180);

});

var transform_styles = ['-webkit-transform', '-ms-transform', 'transform'];
var draw_circle = function(_deg) {
  var rotation = Math.floor(_deg);
  var fill_rotation = rotation;
  var fix_rotation = rotation * 2;
  for(i in transform_styles) {
    $('.circle .fill, .circle .mask.full').css(transform_styles[i], 'rotate(' + fill_rotation + 'deg)');
    $('.circle .fill.fix').css(transform_styles[i], 'rotate(' + fix_rotation + 'deg)');
  }
}


var honeycomb = function(){
  $('.achievements-list').removeAttr('style').find('.clear').remove();
  var w = $('.achievements-list').width();
  var aw = $('.achievement-small').outerWidth(true);
  var row = Math.floor(w / aw);
  var w = $('.achievements-list').width(row * aw );
  $('.achievement-small').each(function(i, e){
    $(e).removeAttr('style');
    if(i == row-1 || i == row * 2 + (row - 1) -1 || i == row * 4 + (row - 2) -1 || i == row * 6 + (row - 3) -1) {
      $(e).css('margin-right', 0);
      $('<div class="clear"></div>').insertAfter(e);
    }
    if(i == row || i == row * 2 + (row - 1) || i == row * 4 + (row - 2) || i == row * 6 + (row - 3)) {
      $(e).css('margin-left', '31px');
    }
  });
  $('<div class="clear"></div>').insertAfter('.achievement-small:last');

}